---
title: "Introduction to Version Control and Git"
author: 
    - name: "Nicolas Barrier"
    - name: Criscely Lujan-Paredes
format:
    revealjs:
        theme: [custom.scss]
        multiplex: true
---

## What is version control?

Version Control Softwares (VCS, also known as Version Manager) allow to:

<!-- ::: {.incremental} -->

- Track changes (*commits*) of a project from the very beginning
    - Who? When? What changes?    
- Save snapshots of a project (*tags*)
    - Highlight critical stages (new versions for instance)
- Create derivates of a project (*branches*)
- Eventually go back in time

<!-- ::: -->

## In short...

::: {layout-ncol=2 layout-valign="bottom"}

![Without VCS](../presentation_gitTraining/img/phd_comics.png){#fig-version-1 width=350} 

![With VCS](../presentation_gitTraining/img/git-flow.jpg){#fig-version-2 width=600}


:::

## Other advantages of VCS

In addition, VCS allow to:

- Save a project remotely (GitHub, Gitlab, etc.)
    - Synchronization with different computers (laptop, HPCs)
- Share a project (codes, packages) with the community
    - Reproducible science
- Facilitate working organization
    - One project (paper, package) = one repository
    - Folder organization (sources, doc, data, etc.)
- Continuous integration
    - Testing of your code when updates
    
Source: UMR AMAP - Atelier MAIA P3M - Introduction Ã  GIT - 04/04/2019

## Why use Git?

Several version control software exist (cf. [Wikipedia](https://en.wikipedia.org/wiki/List_of_version-control_software)). So why use ![](../presentation_gitTraining/img/git_logo.png){height=35 fig-align="center" layout-valign="center" .inline-image} ?

- Popular and successful
- Works offline (contrary to SVN)
- Branching capabilities
    - Cheap and easy to merge
    - Even more so with the [Git-Flow](https://git-flow.readthedocs.io/fr/latest/index.html) extension
- Tracks any type of files
    - Works best with ASCII files (`.R`, `.py`, `.tex`)
    - Large binary files with [Git-LFS](https://git-lfs.github.com/) (`.Rdata`, `.csv`, `.nc`) extension
- Possibility to use different remotes

## Installing Git

First, install Git. 

**Windows and Mac**

Download and install Git from [https://git-scm.com/downloads](https://git-scm.com/downloads).

When done, open  `Git Bash`


**Linux**

Open a Terminal and type:

`
sudo apt install git git-lfs git-flow
`

## Git configuration

On `Git Bash` or in the Terminal, type:

`git config --global user.name "Nicolas Barrier"`

`git config --global user.email "nicolas.barrier@ird.fr"`

`git config --global alias.re "remote -vv"`

`git config --global alias.br "branch -vv"`

`git config --global alias.tree "log --all --decorate --oneline 
--graph"`

The first 2 lines define who you are (in order to know who modified the code).

The last three lines specify Git aliases.

## Git architecture

![Git Architecture](../presentation_gitTraining/img/MgaV9.png){#fig-version-2 height=300}

- `Workspace`: current state of your working directory
- `Local repository`: contains the **local** history of your project
- `Remote repository`: contains the **remote** history of your project

<!-- Git commands allow to exchange information between these 3 components. -->

## Getting started

- Create a folder called `training-git`. 
- Right click on the folder and choose `Open in Git Bash` (Windows) or `Open in Terminal` (Linux/Mac). 
- Type `ls -alrt`
- Type `git init`
- Type again `ls -alrt`. 

A `.git` folder has appeared. It contains the `local` repository.

- Type `git status` and `git log`

## First commit

- Now create a `README.md` file.
- Type `git status`. 

The `README.md` file is in the `Workspace` but not yet in the `Local repo.`

- Type `git add README.md` and `git status`. 

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 1
flowchart LR  
  idw(Workspace) -->|git add| idi(Index)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef index remote:yellow,stroke:black,color:black

class idw workspace;
class idi index;
```

- Type `git commit -m "First commit"`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 1
flowchart LR  
  idw(Index) -->|git commit| idl(Local)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef index remote:yellow,stroke:black,color:black

class idw index;
class idl local;
```

- Type `git status` and `git log`

## Second commit and `git diff`

- Open the `README.md` file and add the following lines:

```
# Readme for Git training
```

- Save the file

- Type `git status`.
- Type `git diff README.md`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 1
flowchart LR  
  idw(Workspace) <-->|git diff| idl(Local)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef index remote:yellow,stroke:black,color:black

class idw workspace;
class idl local;
```

- Create a `LICENCE` file.
- Type `git add LICENCE README.md`
- Type `git commit -m "Second commit"`
- Type `git log` and `git tree`