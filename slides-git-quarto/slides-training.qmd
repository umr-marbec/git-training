---
title: "Introduction to Version Control and Git"
author: 
    - name: "Nicolas Barrier"
    - name: Witold Podlejski
    - name: Criscely Lujan-Paredes
format:
    revealjs:
        theme: [custom.scss]
        multiplex: true
---

## What are version control softwares (VCS)?

<!-- ::: {.incremental} -->

- Track changes (*commits*) of a project from the very beginning
    - Who? When? What changes?    
- Highlight specific moments in the project (*tags*)
    - New version of a code
    - Submitted, revised version of a paper
- Create derivates of a project (*branches*)
- Eventually go back in time

<!-- ::: -->

## In short...

::: {layout-ncol=2 layout-valign="bottom"}

![Without VCS](../presentation_gitTraining/img/phd_comics.png){#fig-version-1 width=350} 

![With VCS](../presentation_gitTraining/img/git-flow.jpg){#fig-version-2 width=600}


:::
    
<!-- ## Why use Git?

Several version control software exist (cf. [Wikipedia](https://en.wikipedia.org/wiki/List_of_version-control_software)). So why use ![](../presentation_gitTraining/img/git_logo.png){height=35 fig-align="center" layout-valign="center" .inline-image} ?

- Popular and successful
- Works offline (contrary to SVN)
- Branching capabilities
    - Cheap and easy to merge
    - Even more so with the [Git-Flow](https://git-flow.readthedocs.io/fr/latest/index.html) extension
- Tracks any type of files
    - Works best with ASCII files (`.R`, `.py`, `.tex`)
    - Large binary files with [Git-LFS](https://git-lfs.github.com/) (`.Rdata`, `.csv`, `.nc`) extension
- Possibility to use different remotes
    - Private/Public
    - Commercial/Institutionnal -->

## Installing Git

**Windows and Mac**

Download and install Git from [https://git-scm.com/downloads](https://git-scm.com/downloads).

When done, open  `Git Bash`


**Linux**

Open a `Terminal` window and type:

`
sudo apt install git git-lfs git-flow
`

## Git configuration

On `Git Bash` or in the `Terminal`:

- Type `git config --global user.name "Firstname Lastname"`
- Type `git config --global user.email "myadresse@ird.fr"`

:::{.callout-note}
These two lines identify you when you update the project.
:::

- Type `git config --global --list` to see the global git configuration.


<!-- `git config --global alias.re "remote -vv"`

`git config --global alias.br "branch -vv"`

`git config --global alias.tree "log --all --decorate --oneline 
--graph"`

These three lines are shortcuts for usefull commands (like a project graph) -->

## Git architecture

<!-- ![Git Architecture](../presentation_gitTraining/img/MgaV9.png){#fig-version-2 height=300} -->


```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 2
flowchart LR
    idw(Workspace)
    idi(Index)
    idl(Local)
    
    idw -->|git add| idi
    idi -->|git commit| idl
    
    classDef workspace fill:lightgray,stroke:black,color:black
    classDef index fill:lightblue,stroke:black,color:black
    classDef local fill:lightgreen,stroke:black,color:black

    class idw workspace;
    class idi index;
    class idl local;
    
```

- `Workspace`: current state of your working directory (your computer)
- `Local`: contains the **local** history of your project
- `Index`: a buffer between the `Workspace` and the `Local` repository

<!-- Git commands allow to exchange information between these 3 components. -->

## Getting started

- Create a folder called `training-git`. 
- Right click on the folder and choose `Open in Git Bash` (Windows) or `Open in Terminal` (Linux/Mac). 
- Type `ls -alrt`
- Type `git init`
- Type again `ls -alrt`. 

A `.git` folder has appeared. It contains the `local` repository.

- Type `git status` and `git log`

## First commit

- Now create a `README.md` file and type `git status`

The `README.md` file is in the `Workspace` but not yet in the `Local repo.`

- Type `git add README.md` and `git status`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 0.8
flowchart LR  
  idw(Workspace) -->|git add| idi(Index)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef remote fill:yellow,stroke:black,color:black

class idw workspace;
class idi index;
```

- Type `git commit -m "First commit"` and type `git log`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 0.8
flowchart LR  
  idw(Index) -->|git commit| idl(Local)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef remote fill:yellow,stroke:black,color:black

class idw index;
class idl local;
```

<br>
```{mermaid}
%%| fig-width: 10
%%| fig-height: 1   
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
   commit id: "0f0e96a"
```



## Second commit

- Open the `README.md` file, add some lines and save the file
- Type `git status`.
- Type `git diff README.md`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 1
flowchart LR  
  idw(Local) -->|git diff| idl(Workspace)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef remote fill:yellow,stroke:black,color:black

class idw workspace;
class idl local;
```

- Create a `LICENCE` file.
- Type `git add LICENCE README.md`
- Type `git commit -m "Second commit"`
- Type `git log`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 1
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
```

## Creating tags

- Open the `README.md` file and add `## Version v1.0.0`.
- Open the `data.csv` file and add `2022,26.8,SkipJack`
- Type `git add data.csv README.md`
- Type `git commit -m "Fourth commit"`
- Type `git tag v1.0.0` and `git status`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 1.5
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    commit id: "07e8835" tag: "v1.0.0"
```

- Type `git tag` to list all existing tags

- Type `git checkout v1.0.0` and `git status`

- Type `git checkout main`

## Ignoring files

It is possible to tell Git to ignore some files (`.Rhistory`, `.log`, etc.)

- Create an empty `output.log` file.
- Type `git status`
- Create a `.gitignore` file and add `output.log`
- Type again `git status`

The `output.log` file does not appear as an `Untracked file` anymore

- Type `git add .gitignore` and `git status`
- Type `git commit -m "Fifth commit"`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 1.5
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    commit id: "07e8835" tag: "v1.0.0"
    commit id: "9670a59"
```

## Display differences

- Type `git diff 0f0e96a v1.0.0` $\rightarrow$ compares a commit and a tag.

:::{.callout-warning}
Order matters when using `git diff`. Differences are shown with the reference state considered to be the first argument.
:::

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 0.75
flowchart LR  
  id1(0f0e96a)-->|git diff| id2(v1.0.0)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef remote fill:yellow,stroke:black,color:black

class id1,id2 local;
```

- Type `git diff 0f0e96a c6dc2bc` $\rightarrow$ compares two commits.

- Type `git diff 0f0e96a HEAD` $\rightarrow$ compares where you are in the history (`HEAD`) with a given commit.
 
:::{.callout-tip}
`HEAD` is a symbolic reference pointing to wherever you are in your commit history, as shown in `git log`
:::


## Other advantages of Git

- Save a project remotely (GitHub, Gitlab, etc.)
    - Synchronization with different computers (laptop, HPCs)
- Share a project (codes, packages) with the community
    - Reproducible science
    
To do that, we need to take into account a $4^{th}$ component in the Git architecture: the `Remote` repository.

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 2
flowchart LR
    idw(Workspace)
    idi(Index)
    idl(Local)
    idr(Remote)
    
    idw -->|git add| idi
    idi -->|git commit| idl
    idl -->|git push| idr
    idr --->|git pull| idw
    idr --->|git fetch| idl
    
    classDef workspace fill:lightgray,stroke:black,color:black
    classDef index fill:lightblue,stroke:black,color:black
    classDef local fill:lightgreen,stroke:black,color:black
    classDef remote fill:yellow,stroke:black,color:black

    class idw workspace;
    class idi index;
    class idl local;
    class idr remote;
    
```

- `Remote`: contains a **remote** version of the history of your project

## Remote hosts

There are several remote hosting possibilities:

**Commercial hosts**:

- GitHub: [https://github.com/](https://github.com/)
- GitLab: [https://gitlab.com/](https://gitlab.com/)

**Institutional hosts**:

- GitLab IRD: [https://forge.ird.fr/](https://forge.ird.fr/)
- GitLab Ifremer [https://gitlab.ifremer.fr/](https://gitlab.ifremer.fr/)

In the following, we will use GitHub

## Creation of a remote repository

- On your GitHub page, click on `Repositories`
- Click on the the green `New` button
- Set `training-git` as the name of your remote repository. Leave the other fields empty

 ![](../presentation_gitTraining/img/github_makeRepo.png){height=450 fig-align="center" layout-valign="center"}

## Update of the remote

Back to `Terminal` or `Git Bash`.

- Type `git remote add origin https://github.com/barriern/training-git.git` (replacing by your GitHub login)
- Eventually, rename your **local** branch using `git branch -M master`
- Type `git push -u origin master`

Have a look at your GitHub repository

- Type `git push --tags`

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 1
flowchart LR

    idl(Local)
    idr(Remote)
    
    idl -->|git push| idr
    
    classDef workspace fill:lightgray,stroke:black,color:black
    classDef index fill:lightblue,stroke:black,color:black
    classDef local fill:lightgreen,stroke:black,color:black
    classDef remote fill:yellow,stroke:black,color:black

    class idw workspace;
    class idi index;
    class idl local;
    class idr remote;
    
```


## Large file storage

To version (reasonably) large files ($\approx ~100$ Mo, like images or data samples) $\rightarrow$ Git with [LFS](https://git-lfs.github.com/) extension.

- Type `git lfs install` to activate the extension 
- Create a `data.csv` file and add `Year,Size,Species`
- Type `git lfs track "*.csv"`

A `.gitattributes` file has appeared, which list all the files managed by Git LFS.

- Type `git add .gitattributes data.csv`
- Type `git commit -m "Third commit"`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 1
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
```


## Going further...
    
## Creating branches

- Type `git checkout -b develop`
- Type `git status`, `git br` and `git tree`
- Open the `README.md` file, add some text and save.
- Type `git add README.md`
- Type `git commit -m "3rd commit"`
- Type `git br` and `git tree`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 2
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    branch develop
    commit id: "3rd"
```

## Switching branch

- Type `git checkout main` (or `git checkout master`)
- Type `git br`
- Open the `LICENCE` file and add some text in it
- Type `git add LICENCE`
- Type `git commit -m "Third commit"`
- Type `git tree`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 2
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    branch develop
    checkout develop
    commit id: "3rd"
    checkout main
    commit id: "4th"
```

## Merging branches

- On the `main` branch, type `git merge develop -m "merge-develop"`
- Type `git log` and `git tree`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 2
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    branch develop
    checkout develop
    commit id: "3rd"
    checkout main
    commit id: "4th"
    merge develop
```

The `merge` command puts the commits from the argument branch (here `develop`) and puts them into the current branch (here `main`).

:::{.callout-note}
During the merging process, another commit is created
:::

## Creating branch from another branch

- Type `git checkout -b feature develop`
- Create a `script.R` file
- Type `git add script.R`
- Type `git commit -m "Fourth commit"`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 3
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    branch develop
    checkout develop
    commit id: "3rd"
    checkout main
    commit id: "4th"
    merge develop
    checkout develop
    branch feature
    commit id: "5th"
```

## Creating branch from a commit

- Identify the number of your c6dc2bc commit using `git log`
- Type `git checkout -b feat-com 1831e4e` replacing `1831e4e` by the commit ID.
- Create a `script.py` file
- Type `git add script.py` and `git commit -m "Sixth commit"`

```{mermaid}
%%| fig-width: 10
%%| fig-height: 4
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    branch feat-com
    branch develop
    checkout develop
    commit id: "3rd"
    checkout main
    commit id: "4th"
    merge develop
    checkout develop
    branch feature
    commit id: "5th"
    checkout feat-com
    commit id: "6th"
```

## Differences between branches

- Type `git diff develop main`

:::{.notes}
You will see the text that has been added to the LICENCE file (4th commit)
:::

:::{.callout-warning}
Order matters: it shows what has been added to `main` branch compared to the `develop` branch
:::

<!-- - Facilitate working organization
    - One project (paper, package) = one repository
    - Folder organization (sources, doc, data, etc.)
- Continuous integration
    - Testing of your code when updates -->

```{mermaid}
%%| fig-width: 10.5
%%| fig-height: 0.75
flowchart LR  
  id1(Develop)-->|git diff| id2(Main)
classDef workspace fill:lightgray,stroke:black,color:black
classDef index fill:lightblue,stroke:black,color:black
classDef local fill:lightgreen,stroke:black,color:black
classDef remote fill:yellow,stroke:black,color:black

class id1,id2 local;
```


## Deleting a branch

- Type `git checkout main`
- Type `git branch -d develop`
- Type `git br`
- Type `git branch -d feat-com`

An error occurs! The suppression of `feat-com` implies the loss of the `6th` and `Rev. 6th` commits! To force the suppression, use `-D` instead of `-d`.

- Type `git branch -D feat-com`

:::{.callout-note}
The suppression of `develop` was ok because the content of commit `3rd` is included in the merge.
:::


## Reverting a commit

- Identify the id of the most recent commit using `git log`
- Type `git revert c6dc2bc` (replace `c6dc2bc` by your commit id)

```{mermaid}
%%| fig-width: 10
%%| fig-height: 1
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph
    commit id: "0f0e96a"
    commit id: "c6dc2bc"
    commit id: "-c6dc2bc" type: REVERSE
```

:::{.callout-note}
Here, the workspace is the same as after the first commit, but we keep track of the second commit and its cancellation. The `LICENCE` file is gone and the `README.md` file is empty.
:::

## Sources

- Plateau bioinformatique, Montpellier: Formation Git(Lab) (05/04/2018)
- UMR AMAP (Atelier MAIA P3M), Montpellier: Introduction à GIT (04/04/2019)
